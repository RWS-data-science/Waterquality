source("lib.R")
source("lib.R")
df <- load("data/data_tot.RData")
data_tot <- load("data/data_tot.RData")
rm(df)
data_tot <- load("data/data_tot.RData")
df <- load("data/data_tot.RData")
#Selecteer nutrienten, PAK's en wat andere mogelijk relevante parameters
pak <- data_tot[which(data_tot$is_PAK == 1),]
unique(data_tot$PAROMS)
View(unique(data_tot$PAROMS))
View(unique(pak$PAROMS))
data_tot$PAROMS_HDH <- paste(data_tot$PAROMS, data_tot$HDH, sep="_")
#Selecteer nutrienten, PAK's en wat andere mogelijk relevante parameters
pak <- data_tot[which(data_tot$is_PAK == 1),]
df <- data_tot[which(data_tot$PAROMS %in% c("chlorofyl-a","nitraat","nitriet", "stikstof","orthofosfaat",
"ammonium","totaal fosfaat", "Zwevende stof", "Temperatuur", "zuurstof", "Doorzicht","Zuurgraad","Kjeldahl stikstof",
"calcium", "kalium", "sulfaat") |
data_tot$is_PAK == 1),]
df_wide <- dcast(df,
DATUM + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
df_wide$month <- as.factor(month(df_wide$DATUM))
colnames(df_wide)
for (i in colnames(df_wide)[4:ncol(df_wide)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
for (i in colnames(df_wide)[4:(ncol(df_wide)]-1)){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
df_wide <- dcast(df,
DATUM + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
df_wide$month <- as.factor(month(df_wide$DATUM))
for (i in colnames(df_wide)[4:(ncol(df_wide)-1)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
format(as.Date(df$DATUM), "%U-%Y")
df$datum_week <- format(as.Date(df$DATUM), "%U-%Y")
df_wide <- dcast(df,
datum_week + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
df_wide$month <- as.factor(month(df_wide$DATUM))
df_wide$month <- as.factor(month(df_wide$datum_week))
df$datum_week <- format(as.Date(df$DATUM), "%U-%Y")
df_wide <- dcast(df,
datum_week + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
View(df)
View(df[,c("DATUM", "datum_week")])
?as.Date
df$datum_week <- format(as.Date(df$DATUM), "%Y-%V")
format(as.Date(df$DATUM), "%Y-%V")
df_wide <- dcast(df,
datum_week + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
class(df$datum_week)
as.factor(month(as.Date(df_wide$datum_week, format = "%Y-%V")))
as.Date(df_wide$datum_week, format = "%Y-%V")
as.factor(month(df$DATUM))
df$month <- as.factor(month(df$DATUM))
df_wide <- dcast(df,
datum_week + month + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
for (i in colnames(df_wide)[4:(ncol(df_wide)-1)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
install.packages("corrplot")
install.packages("shinythemes")
save(df_wide, "visualizations/df_wide.RData")
save(df_wide, file="visualizations/df_wide.RData")
load("visualizations/df_wide.RData")
pars <- colnames(df_wide)[4:(ncol(df_wide)-1)]
pars <- colnames(df_wide)[5:(ncol(df_wide)-1)]
pars
#Selecteer nutrienten, PAK's en wat andere mogelijk relevante parameters
pak <- data_tot[which(data_tot$is_PAK == 1),]
df <- data_tot[which(data_tot$PAROMS %in% c("chlorofyl-a","nitraat","nitriet", "stikstof","orthofosfaat",
"ammonium","totaal fosfaat", "Zwevende stof", "zuurstof", "Doorzicht","Zuurgraad","Kjeldahl stikstof",
"calcium", "kalium", "sulfaat") |
data_tot$is_PAK == 1),]
df$datum_week <- format(as.Date(df$DATUM), "%Y-%V")
df$month <- as.factor(month(df$DATUM))
df_wide <- dcast(df,
datum_week + month + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
for (i in colnames(df_wide)[4:(ncol(df_wide)-1)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
save(df_wide, file="visualizations/df_wide.RData")
shiny::runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
library(data.table)
library(corrplot)
library(ggplot2)
library(dplyr)
library(shiny)
library(shinythemes)
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
?cor
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
m <- cor(df_wide[5:55])
m <- cor(df_wide[5:55], use = "pairwise.complete.obs")
pm <- cor.mtest(df_wide[5:55])$p
View(m)
corrplot(m, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag = FALSE)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(m, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag = FALSE)
View(df_wide)
#keep only columns with high availability
na_count <-sapply(df_wide, function(y) sum(length(which(is.na(y)))))
sapply(df_wide, function(y) sum(length(which(is.na(y)))))/nrow(df_wide)
df_wide <- df_wide[,na_count<0.4]
df_wide <- dcast(df,
datum_week + month + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
#df_wide$month <- as.factor(month(as.Date(df_wide$datum_week, format = "%Y-%V")))
#verwijder outliers voor alle parameters
for (i in colnames(df_wide)[4:(ncol(df_wide)-1)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
#keep only columns with high availability
na_count <-sapply(df_wide, function(y) sum(length(which(is.na(y)))))/nrow(df_wide)
na_count<0.4
which(na_count<0.4)
df_wide <- df_wide[,which(na_count<0.4)]
df_wide <- dcast(df,
datum_week + month + LOCOMS + knmi_STN +TN ~ PAROMS_HDH, value.var = "WAARDE", drop = T,fun.aggregate = mean) #dagen met meerdere metingen worden gemiddeld
for (i in colnames(df_wide)[4:(ncol(df_wide)-1)]){
q99 <- quantile(df_wide[,i],c(0.005, 0.995), na.rm=T) #0.5 en 99.5 percentiel
df_wide[which(df_wide[,i] > q99[2]|
df_wide[,i] < q99[1]),] <- NA
}
#keep only columns with high availability
na_count <-sapply(df_wide, function(y) sum(length(which(is.na(y)))))/nrow(df_wide)
df_wide <- df_wide[,which(na_count<0.6)]
save(df_wide, file="visualizations/df_wide.RData")
m <- cor(df_wide[5:55], use = "pairwise.complete.obs")
m <- cor(df_wide[5:24], use = "pairwise.complete.obs")
corrplot(m, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
# hide correlation coefficient on the principal diagonal
diag = FALSE)
runApp('visualizations/app')
pars <- colnames(df_wide)[5:(ncol(df_wide)-1)]
runApp('visualizations/app')
runApp('visualizations/app')
dim(pak)
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('test')
library(data.table)
library(corrplot)
library(ggplot2)
library(dplyr)
library(shiny)
library(shinythemes)
load("visualizations/df_wide.RData")
pars <- colnames(df_wide)[5:(ncol(df_wide)-1)]
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
runApp('visualizations/app')
